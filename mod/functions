#!rsc by RouterOS
# RouterOS functions

:global CompareDate;
:global CreateFile;
:global HASyncFile;

# Compares 2 dates (string format or array as returned by /system/clock/get)
:set $CompareDate do={
  :local ldate $1;
  :local rdate $2;
  :local months {jan="01";feb="02";mar="03";apr="04";may="05";jun="06";jul="07";aug="08";sep="09";oct="10";nov="11";dec="12"};
  :local strre "^[a-z]{3}/[0-3]?[0-9]/2[0-1][0-9][0-9] [0-2]?[0-9]:[0-5][0-9]:[0-5][0-9]\$";
  :local str2arr;
  :local arr2arr;
  :local prep;

  :set $str2arr do={
    :local months {jan="01";feb="02";mar="03";apr="04";may="05";jun="06";jul="07";aug="08";sep="09";oct="10";nov="11";dec="12"};
    :local strre "^[a-z]{3}/[0-3]?[0-9]/2[0-1][0-9][0-9] [0-2]?[0-9]:[0-5][0-9]:[0-5][0-9]\$";
    :if (!([:typeof $1] = "str" && $1 ~ $strre)) do={:return -1;}
    :local date [:pick $1 0 [find $1 " "]];
    :local time [:pick $1 ([find $1 " "]+1) [:len $1]];
    :local ret [:toarray ""];
    :set ($ret->"M") ($months->[:pick $date 0 [:find $date "/"]]);
    :set ($ret->"D") [:pick $date ([:find $date "/"]+1) ([:len $date]-5)];
    :set ($ret->"Y") [:pick $date ([:len $date]-4) [:len $date]];
    :set ($ret->"h") [:pick $time 0 [:find $time ":"]];
    :set ($ret->"m") [:pick $time ([:find $time ":"]+1) ([:len $time]-3)];
    :set ($ret->"s") [:pick $time ([:len $time]-2) [:len $time]];
    :return $ret;
  }

  :set $arr2arr do={
    :local months {jan="01";feb="02";mar="03";apr="04";may="05";jun="06";jul="07";aug="08";sep="09";oct="10";nov="11";dec="12"};
    :local strre "^[a-z]{3}/[0-3]?[0-9]/2[0-1][0-9][0-9] [0-2]?[0-9]:[0-5][0-9]:[0-5][0-9]\$";
    :if ([:len ($1->"date")] = 0 || [:len ($1->"time")] = 0) do={:return -1;}
    :local ret [:toarray ""];
    :local date ($1->"date");
    :local time ($1->"time");
    :set ($ret->"M") ($months->[:pick $date 0 [:find $date "/"]]);
    :set ($ret->"D") [:pick $date ([:find $date "/"]+1) ([:len $date]-5)];
    :set ($ret->"Y") [:pick $date ([:len $date]-4) [:len $date]];
    :set ($ret->"h") [:pick $time 0 [:find $time ":"]];
    :set ($ret->"m") [:pick $time ([:find $time ":"]+1) ([:len $time]-3)];
    :set ($ret->"s") [:pick $time ([:len $time]-2) [:len $time]];
    :return $ret;
  }

  :set $prep do={
    :local temp [:toarray ""];
    :foreach k,v in=$1 do={
      if ([:len $v] = 1) do={
        :set ($temp->"$k") ("0" . $v);
      } else={
        :set ($temp->$k) $v;
      }
    }
    :local ret ($temp->"Y" . $temp->"M" . $temp->"D" . $temp->"h" . $temp->"m" . $temp->"s");
    :return [:tonum $ret];
  }

  :if ([:typeof $ldate] = "array") do={
    :set $ldate [$arr2arr $ldate];
  }
  :if ([:typeof $rdate] = "array") do={
    :set $rdate [$arr2arr $rdate];
  }
  :if ([:typeof $ldate] = "str") do={
    :set $ldate [$str2arr $ldate];
  }
  :if ([:typeof $rdate] = "str") do={
    :set rdate [$str2arr $rdate];
  }
  :if ($ldate = -1 || $rdate = -1) do={:return -1;} 
  :set $ldate [$prep $ldate];
  :set $rdate [$prep $rdate];
  :if ($ldate > $rdate) do={:return "newer";}
  :if ($ldate < $rdate) do={:return "older";}
  :if ($ldate = $rdate) do={:return "equal";}
}

# Creates a empty file with or without file extension
:set $CreateFile do={
  :global LogPrintExit2;
  :global CleanFilePath;
  :global WaitForFile;
  :local path [$CleanFilePath $1];
  :local service [/ip/service/find name=www disabled=no]
  :local port [/ip/service/get ($service->0) value-name=port]
  :if ([:len $service] = 0) do={
    $LogPrintExit2 error "CreateFile" ("Unable to find active web service on device. Please enable www service") true;
  }
  :local url ("http://127.0.0.1:" . $port . "/file")
  :local res [/tool/fetch url=$url output=file dst-path=$path as-value];
  :if ($res->"status" != "finished") do={
    $LogPrintExit2 error "CreateFile" ("Unable to create file " . $path) true;
  }
  $WaitForFile $path
  /file/set $path content="";
}

:set $HASyncFile do={
  :global HASyncProto;
  :global HASyncPartner;
  :global HASyncUser;
  :global HASyncPass;
  :global CleanFilePath;
  :global LogPrintExit2;

  :local direction $1;
  :local path [$CleanFilePath $2];
  :local url ($HASyncProto . "://" . $HASyncPartner . "/" . $path);
  # DOwnload
  :if ($direction ~ "(get|GET|get|PULL|pull|Pull)") do={
    $LogPrintExit2 info "HASync-Transfer" ("Downloading file " . $path . " from Partner (" . $HASyncPartner . ")") false;
    :local res [/tool/fetch upload=no user=$HASyncUser password=$HASyncPass url=$url output=file dst-path=$path as-value]
  }
  # Upload
  :if ($direction ~ "(put|PUT|Put|PUSH|push|Push)") do={
    $LogPrintExit2 info "HASync-Transfer" ("Uploading file " . $path . " to Partner (" . $HASyncPartner . ")") false;
    :local res [/tool/fetch upload=yes user=$HASyncUser password=$HASyncPass url=$url src-path=$path as-value]
  }
  :if ($res->"status" = "finished") do={
    $LogPrintExit2 info "HASync-Transfer" ("File Transfer to/from " . $url . "successfull") false;
    :return "synced";
  } else={
    $LogPrintExit2 warning "HASync-Transfer" ("Unable to transfer file to/from " . $url) false;
    :return "error";
  }
}
