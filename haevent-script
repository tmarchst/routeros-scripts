#!rsc by RouterOS
# RouterOS script: haevent-script
#
:local 0 "haevent-script";
:global GlobalFunctionsReady;
:while ($GlobalFunctionsReady != true) do={ :delay 500ms; }


:global HADefaultState;
:global HACurrentState;
:global HASyncInterface;

:global IfThenElse;
:global EitherOr;
:global LogPrintExit2;
:global SendNotification2;
:global SymbolForNotification;
:global ScriptFromTerminal;

:local HASyncInterfaceVal [/interface/vrrp/get $HASyncInterface];

:if (!($HADefaultState ~ ("^(Master|master|Backup|Backup)\$")))  do={
  $LogPrintExit2 error $0 ("Variable HADefaultState not set." ) true;
  :return false;
}
:if (!([:len $HASyncInterfaceVal] > 0)) do={
  $LogPrintExit2 error $0 ("Unable to get HA-Interface state!" ) true;
  :return false;
}
:if ($HACurrentState != [$IfThenElse ($HASyncInterfaceVal->"master" && !($HASyncInterfaceVal->"backup")) "Master" "Backup"]) do={
  :set HACurrentState [$IfThenElse ($HASyncInterfaceVal->"master" && !($HASyncInterfaceVal->"backup")) "Master" "Backup"];
  $LogPrintExit2 warning $0 ("HA State for Device " . $Identity . " changed to " . $HACurrentState ) false;
  :if (![ $ScriptFromTerminal $0 ]) do={
    $LogPrintExit2 info $0 ("Sending notification" ) false;
    $SendNotification2 ({ origin=$0; \
		    subject=([ $SymbolForNotification [ $IfThenElse ($HADefaultState = $HACurrentState) "chart-increasing" "chart-decreasing"] ] . "HA-State changed"); \
		    message=("HA-State of device " . $Identity . " changed to " . $HACurrentState . ".\n\n" . \
				  [ $DeviceInfo ] . "\n\n" . \
				  "Default VRRP State:  " . $HADefaultState . "\n" . \
				  "Current VRRP State:  " . $HACurrentState . "\n" ); silent=true });
  }
}

